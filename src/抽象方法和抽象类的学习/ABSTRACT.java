package 抽象方法和抽象类的学习;
/*
* 抽象方法:
* 1.由abstract修饰
* 2.只有方法的意义，没有具体的实现
* */

/*
* 抽象类:
* 1.由abstract进行修饰
* 2.包含抽象方法的类必须是抽象类
* 3.不包含抽象方法的类也可以声明为抽象类--代表这个类无法创建出对象
* 4.抽象类不能够实例化
* 5.抽象类是需要被继承的，派生类:
* A.重写所有的抽象方法---常用
* B.也声明为抽象类-----不常用
* 6.抽象类的意义：
* A.封装共有的属性以及行为----代码复用
* B.为所有派生类提供统一的类型----向上造型
* C.可以包含抽象方法，为所有派生类提供统一的入口
* 派生类的具体行为是不一样的，入口是一致的。
 */
//设计规则
/*
* 1.将派生类所共有的属性和行为抽到超类之中---抽共性
* 2.所以派生类的行为都一样，设计为普通方法
* 3.所有派生类的行为都不一样，设计为抽象方法
*
* */


//抽象类的意义就在于强制要求子类进行重写，主要的作用是强制要求子类必须将这个方法进行重写
//不能够使用构造方法实例化，只能够使用匿名内部类进行实例化
public class ABSTRACT {
    public static void main(String[] args)
    {

    }
}


